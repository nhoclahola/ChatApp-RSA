// ColorContext.tsx
import React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface Colors {
	primary: string;
	secondary: string;
}

interface ColorContextType {
	colors: Colors;
	setPrimaryColor: (newColor: string) => void;
	setSecondaryColor: (newColor: string) => void;
}

const defaultColors: Colors = {
	primary: '#3498db',
	secondary: '#2ecc71',
};

const ColorContext = createContext<ColorContextType | undefined>(undefined);

export const ColorProvider = ({ children }: { children: ReactNode }) => {
	const [colors, setColors] = useState<Colors>(defaultColors);

	useEffect(() => {
		const loadColors = async () => {
			try {
				const primary = await AsyncStorage.getItem('primary');
				const secondary = await AsyncStorage.getItem('secondary');
				setColors({
					primary: primary ?? defaultColors.primary,
					secondary: secondary ?? defaultColors.secondary,
				});
			} catch (error) {
				console.error('Failed to load colors from AsyncStorage', error);
			}
		};
		loadColors();
	}, []);

	const setPrimaryColor = async (newColor: string) => {
		try {
			await AsyncStorage.setItem('primary', newColor);
			setColors((prevColors) => ({
				...prevColors,
				primary: newColor,
			}));
		} catch (error) {
			console.error('Failed to save primary color to AsyncStorage', error);
		}
	};

	const setSecondaryColor = async (newColor: string) => {
		try {
			await AsyncStorage.setItem('secondary', newColor);
			setColors((prevColors) => ({
				...prevColors,
				secondary: newColor,
			}));
		} catch (error) {
			console.error('Failed to save secondary color to AsyncStorage', error);
		}
	};

	return (
		<ColorContext.Provider value={{ colors, setPrimaryColor, setSecondaryColor }}>
			{children}
		</ColorContext.Provider>
	);
};

export const useColorContext = (): ColorContextType => {
	const context = useContext(ColorContext);
	if (!context) {
		throw new Error('useColorContext must be used within a ColorProvider');
	}
	return context;
};
